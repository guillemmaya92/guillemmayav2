[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "文章",
    "section": "",
    "text": "日期\n\n\n标题\n\n\n\n\n\n\n2024年12月27日\n\n\n比特币对数趋势：自每次减半以来的分析\n\n\n\n\n\n无匹配项\n\n 回到顶部"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "你好，世界！",
    "section": "",
    "text": "从无到有，深入探讨现代经济所面临的挑战。我是数据和经济学的爱好者，致力于探索并揭示对全球世界的真正理解。关注社会不平等和可持续经济的发展，我采用一种横向的方法，从整体和多学科的视角审视这些概念。\n\n\n 回到顶部"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "Guillem Maya",
    "section": "",
    "text": "下载 PDF"
  },
  {
    "objectID": "cv.html#关于我",
    "href": "cv.html#关于我",
    "title": "Guillem Maya",
    "section": "关于我",
    "text": "关于我"
  },
  {
    "objectID": "cv.html#工作经历",
    "href": "cv.html#工作经历",
    "title": "Guillem Maya",
    "section": "工作经历",
    "text": "工作经历"
  },
  {
    "objectID": "cv.html#education",
    "href": "cv.html#education",
    "title": "Guillem Maya",
    "section": "Education",
    "text": "Education"
  },
  {
    "objectID": "cv.html#language",
    "href": "cv.html#language",
    "title": "Guillem Maya",
    "section": "Language",
    "text": "Language"
  },
  {
    "objectID": "cv.html#skills",
    "href": "cv.html#skills",
    "title": "Guillem Maya",
    "section": "Skills",
    "text": "Skills"
  },
  {
    "objectID": "posts/202412-bitcoin-halvings/index.html",
    "href": "posts/202412-bitcoin-halvings/index.html",
    "title": "比特币对数趋势：自每次减半以来的分析",
    "section": "",
    "text": "一张显示比特币在每个减半周期的对数价格的图表。\n\n\n代码\n# Libraries\n# ==============================================================================\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport requests\n\n# Get API Data\n# ==============================================================================\n# Create a df with final year dates\ndp = pd.DataFrame({'date': pd.date_range(start='2010-12-31', end='2024-12-31', freq='Y')})\ndp['to_ts'] = dp['date'].apply(lambda x: int(pd.to_datetime(x).timestamp()))\n\n# Create an empty list\ndataframes = []\n\n# Iterate API with each date\nfor to_ts in dp['to_ts']:\n    # Build an URL with parameters and transform data\n    url = f\"https://min-api.cryptocompare.com/data/v2/histoday?fsym=BTC&tsym=USD&limit=365&toTs={to_ts}\"\n    response = requests.get(url)\n    data = response.json().get(\"Data\", {}).get(\"Data\", [])\n    df = pd.DataFrame([\n        {\n            \"symbol\": \"BTCUSD\",\n            \"date\": pd.to_datetime(entry[\"time\"], unit=\"s\").date(),\n            \"open\": entry[\"open\"],\n            \"close\": entry[\"close\"],\n            \"low\": entry[\"low\"],\n            \"high\": entry[\"high\"],\n            \"volume\": entry[\"volumeto\"]\n        }\n        for entry in data\n    ])\n    dataframes.append(df)\n# Combine all df into one\nbtc = pd.concat(dataframes, ignore_index=True)\n\n# DataSet 0 - Halving\n#================================================================================\nhalving = {'halving': [0 , 1, 2, 3, 4],\n           'date': ['2009-01-03', '2012-11-28', '2016-07-09', '2020-05-11', '2024-04-20'] \n           }\n\nhalving = pd.DataFrame(halving)\nhalving['date'] = pd.to_datetime(halving['date'])\n\n# DataSet 1 - BTC Price\n# ==============================================================================\n# Prepare dataset\nbtc = btc.drop_duplicates()\nbtc['date'] = pd.to_datetime(btc['date'])\nbtc['year_month'] = btc['date'].dt.strftime('%Y-%m')\nbtc = btc.set_index('date')\nbtc = btc.asfreq('D').ffill()\nbtc = btc.reset_index()\nbtc.sort_values(by=['date'], inplace=True)\nbtc = pd.merge(btc, halving, on='date', how='left')\nbtc['halving'].fillna(method='ffill', inplace=True)\nbtc['halving'].fillna(0, inplace=True)\nbtc['halving'] = btc['halving'].astype(int)\nbtc['first_close'] = btc.groupby('halving')['close'].transform('first')\nbtc['increase'] = (btc['close'] - btc['first_close']) / btc['first_close'] * 100\nbtc['days'] = btc.groupby('halving').cumcount() + 1\nbtc['closelog'] = np.log10(btc['close'])\nbtc = btc[btc['halving'] &gt;= 1]\nbtc['daystotal'] = btc.groupby('symbol').cumcount() + 1\n\n# Graph 1 - SEABORN\n# ==============================================================================\n# Font Style\nplt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Open Sans'], 'font.size': 10})\n\n# Colors Background\nregions = [\n    (0, 500, '#6B8E23'), # Green\n    (500, 1000, '#FF4500'), # Red\n    (1000, 1500, '#FFA500') # Orange\n    ]  \n\n# Colors Palette Lines\nlines = {\n    0: '#E0E0E0',  # Very Light Grey\n    1: '#C0C0C0',  # Light Grey\n    2: '#808080',  # Medium Grey\n    3: '#404040',  # Dark Grey\n    4: '#8B0000'   # Red\n}\n\n# Seaborn to plot a graph\nsns.set(style=\"whitegrid\", rc={\"grid.color\": \"0.95\", \"axes.grid.axis\": \"y\"})\nplt.figure(figsize=(16, 9))\nsns.lineplot(x='days', y='closelog', hue='halving', data=btc, markers=True, palette=lines, linewidth=1)\n\n# Add region colors in the background\nfor start, end, color in regions:\n    plt.axvspan(start, end, color=color, alpha=0.05)\n\n# Title and axis\nplt.title('Bitcoin Logarithmic Trends: Analysis Since Each Halving', fontsize=16, fontweight='bold', pad=20)\nplt.xlabel('Days',  fontsize=10, fontweight='bold')\nplt.ylabel('Log Price', fontsize=10, fontweight='bold')\nplt.xlim(0, 1500)\nplt.xticks(range(0, 1501, 125), fontsize=9)\nplt.tick_params(axis='both', labelsize=8)\nplt.yticks(fontsize=9)\n\n# Custom legend\nlegend = plt.legend(title=\"Halving\", loc='lower right', fontsize=8, title_fontsize='10')\nnew_title = 'Dates:'\nlegend.set_title(new_title)\nnew_labels = ['1st Halving: 2012-11-28 to 2016-07-09', '2nd Halving: 2016-07-09 to 2020-05-11', '3rd Halving: 2020-05-11 to 2024-04-20', '4th Halving: 2024-04-20 to present'] # Adjust the number of labels according to your data\nfor text, new_label in zip(legend.texts, new_labels):\n    text.set_text(new_label)\n\n# Maximo First 750 days\nbtc1 = btc[(btc['days'] &gt;= 0) & (btc['days'] &lt;= 750)]\nfor halving, group in btc1.groupby('halving'):\n    max_value = group['closelog'].max()\n    max_row = group[group['closelog'] == max_value].iloc[0]\n    plt.plot(max_row['days'], max_row['closelog'] +0.05, marker='*', color='darkgoldenrod', markersize=5)\n    plt.text(max_row['days'], max_row['closelog'] +0.1, f'{max_row[\"close\"]:,.0f} ({max_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkgoldenrod')\n\n# Min Between 500 and 1000 days\nbtc2 = btc[(btc['days'] &gt;= 500) & (btc['days'] &lt;= 1000)]\nfor halving, group in btc2.groupby('halving'):\n    min_value = group['closelog'].min()\n    min_row = group[group['closelog'] == min_value].iloc[0]\n    plt.plot(min_row['days'], min_row['closelog'] - 0.05, marker='v', color='darkred', markersize=5)\n    plt.text(min_row['days'], min_row['closelog'] -0.15, f'{min_row[\"close\"]:,.0f} ({min_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkred')\n\n# Max After 750 days \nbtc3 = btc[(btc['days'] &gt;= 750) & (btc['days'] &lt;= 1500)]\nfor halving, group in btc3.groupby('halving'):\n    max_value = group['closelog'].max()\n    max_row = group[group['closelog'] == max_value].iloc[0]\n    plt.plot(max_row['days'], max_row['closelog'] +0.05, marker='^', color='darkgreen', markersize=5)\n    plt.text(max_row['days'], max_row['closelog'] +0.1, f'{max_row[\"close\"]:,.0f} ({max_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkgreen')\n\n# Custom Last Dots\nmax_vals = btc.groupby('halving').agg({'closelog': 'last', 'days': 'max'}).reset_index()\nfor index, row in max_vals.iterrows():\n    plt.plot(row['days'], row['closelog'], 'ro', markersize=2)\n\n# Custom Line labels\nfor halving, group in btc.groupby('halving'):\n    last_point = group.iloc[-1]\n    x = last_point['days']\n    y = last_point['closelog']\n    max_days = group['days'].max()\n    plt.text(x + 8, y, f'Halving {halving}\\n{max_days} days', color=lines[halving], fontsize=8, ha='left', va='center')\n    \n# Add Year Label\ncurrent_year_month = btc['year_month'].max() \nplt.text(1, 1.05, f'{current_year_month}',\n    transform=plt.gca().transAxes,\n    fontsize=22, ha='right', va='top',\n    fontweight='bold', color='#D3D3D3')\n\n# Add Data Source\nplt.text(0, -0.065, 'Data Source: CryptoCompare', \n         transform=plt.gca().transAxes, \n         fontsize=8, \n         color='gray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Print it!\nplt.show()"
  },
  {
    "objectID": "posts/202412-bitcoin-halvings/index.html#摘要",
    "href": "posts/202412-bitcoin-halvings/index.html#摘要",
    "title": "比特币对数趋势：自每次减半以来的分析",
    "section": "",
    "text": "一张显示比特币在每个减半周期的对数价格的图表。\n\n\n代码\n# Libraries\n# ==============================================================================\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport requests\n\n# Get API Data\n# ==============================================================================\n# Create a df with final year dates\ndp = pd.DataFrame({'date': pd.date_range(start='2010-12-31', end='2024-12-31', freq='Y')})\ndp['to_ts'] = dp['date'].apply(lambda x: int(pd.to_datetime(x).timestamp()))\n\n# Create an empty list\ndataframes = []\n\n# Iterate API with each date\nfor to_ts in dp['to_ts']:\n    # Build an URL with parameters and transform data\n    url = f\"https://min-api.cryptocompare.com/data/v2/histoday?fsym=BTC&tsym=USD&limit=365&toTs={to_ts}\"\n    response = requests.get(url)\n    data = response.json().get(\"Data\", {}).get(\"Data\", [])\n    df = pd.DataFrame([\n        {\n            \"symbol\": \"BTCUSD\",\n            \"date\": pd.to_datetime(entry[\"time\"], unit=\"s\").date(),\n            \"open\": entry[\"open\"],\n            \"close\": entry[\"close\"],\n            \"low\": entry[\"low\"],\n            \"high\": entry[\"high\"],\n            \"volume\": entry[\"volumeto\"]\n        }\n        for entry in data\n    ])\n    dataframes.append(df)\n# Combine all df into one\nbtc = pd.concat(dataframes, ignore_index=True)\n\n# DataSet 0 - Halving\n#================================================================================\nhalving = {'halving': [0 , 1, 2, 3, 4],\n           'date': ['2009-01-03', '2012-11-28', '2016-07-09', '2020-05-11', '2024-04-20'] \n           }\n\nhalving = pd.DataFrame(halving)\nhalving['date'] = pd.to_datetime(halving['date'])\n\n# DataSet 1 - BTC Price\n# ==============================================================================\n# Prepare dataset\nbtc = btc.drop_duplicates()\nbtc['date'] = pd.to_datetime(btc['date'])\nbtc['year_month'] = btc['date'].dt.strftime('%Y-%m')\nbtc = btc.set_index('date')\nbtc = btc.asfreq('D').ffill()\nbtc = btc.reset_index()\nbtc.sort_values(by=['date'], inplace=True)\nbtc = pd.merge(btc, halving, on='date', how='left')\nbtc['halving'].fillna(method='ffill', inplace=True)\nbtc['halving'].fillna(0, inplace=True)\nbtc['halving'] = btc['halving'].astype(int)\nbtc['first_close'] = btc.groupby('halving')['close'].transform('first')\nbtc['increase'] = (btc['close'] - btc['first_close']) / btc['first_close'] * 100\nbtc['days'] = btc.groupby('halving').cumcount() + 1\nbtc['closelog'] = np.log10(btc['close'])\nbtc = btc[btc['halving'] &gt;= 1]\nbtc['daystotal'] = btc.groupby('symbol').cumcount() + 1\n\n# Graph 1 - SEABORN\n# ==============================================================================\n# Font Style\nplt.rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Open Sans'], 'font.size': 10})\n\n# Colors Background\nregions = [\n    (0, 500, '#6B8E23'), # Green\n    (500, 1000, '#FF4500'), # Red\n    (1000, 1500, '#FFA500') # Orange\n    ]  \n\n# Colors Palette Lines\nlines = {\n    0: '#E0E0E0',  # Very Light Grey\n    1: '#C0C0C0',  # Light Grey\n    2: '#808080',  # Medium Grey\n    3: '#404040',  # Dark Grey\n    4: '#8B0000'   # Red\n}\n\n# Seaborn to plot a graph\nsns.set(style=\"whitegrid\", rc={\"grid.color\": \"0.95\", \"axes.grid.axis\": \"y\"})\nplt.figure(figsize=(16, 9))\nsns.lineplot(x='days', y='closelog', hue='halving', data=btc, markers=True, palette=lines, linewidth=1)\n\n# Add region colors in the background\nfor start, end, color in regions:\n    plt.axvspan(start, end, color=color, alpha=0.05)\n\n# Title and axis\nplt.title('Bitcoin Logarithmic Trends: Analysis Since Each Halving', fontsize=16, fontweight='bold', pad=20)\nplt.xlabel('Days',  fontsize=10, fontweight='bold')\nplt.ylabel('Log Price', fontsize=10, fontweight='bold')\nplt.xlim(0, 1500)\nplt.xticks(range(0, 1501, 125), fontsize=9)\nplt.tick_params(axis='both', labelsize=8)\nplt.yticks(fontsize=9)\n\n# Custom legend\nlegend = plt.legend(title=\"Halving\", loc='lower right', fontsize=8, title_fontsize='10')\nnew_title = 'Dates:'\nlegend.set_title(new_title)\nnew_labels = ['1st Halving: 2012-11-28 to 2016-07-09', '2nd Halving: 2016-07-09 to 2020-05-11', '3rd Halving: 2020-05-11 to 2024-04-20', '4th Halving: 2024-04-20 to present'] # Adjust the number of labels according to your data\nfor text, new_label in zip(legend.texts, new_labels):\n    text.set_text(new_label)\n\n# Maximo First 750 days\nbtc1 = btc[(btc['days'] &gt;= 0) & (btc['days'] &lt;= 750)]\nfor halving, group in btc1.groupby('halving'):\n    max_value = group['closelog'].max()\n    max_row = group[group['closelog'] == max_value].iloc[0]\n    plt.plot(max_row['days'], max_row['closelog'] +0.05, marker='*', color='darkgoldenrod', markersize=5)\n    plt.text(max_row['days'], max_row['closelog'] +0.1, f'{max_row[\"close\"]:,.0f} ({max_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkgoldenrod')\n\n# Min Between 500 and 1000 days\nbtc2 = btc[(btc['days'] &gt;= 500) & (btc['days'] &lt;= 1000)]\nfor halving, group in btc2.groupby('halving'):\n    min_value = group['closelog'].min()\n    min_row = group[group['closelog'] == min_value].iloc[0]\n    plt.plot(min_row['days'], min_row['closelog'] - 0.05, marker='v', color='darkred', markersize=5)\n    plt.text(min_row['days'], min_row['closelog'] -0.15, f'{min_row[\"close\"]:,.0f} ({min_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkred')\n\n# Max After 750 days \nbtc3 = btc[(btc['days'] &gt;= 750) & (btc['days'] &lt;= 1500)]\nfor halving, group in btc3.groupby('halving'):\n    max_value = group['closelog'].max()\n    max_row = group[group['closelog'] == max_value].iloc[0]\n    plt.plot(max_row['days'], max_row['closelog'] +0.05, marker='^', color='darkgreen', markersize=5)\n    plt.text(max_row['days'], max_row['closelog'] +0.1, f'{max_row[\"close\"]:,.0f} ({max_row[\"increase\"]:,.0f})%', fontsize=7, ha='center', color='darkgreen')\n\n# Custom Last Dots\nmax_vals = btc.groupby('halving').agg({'closelog': 'last', 'days': 'max'}).reset_index()\nfor index, row in max_vals.iterrows():\n    plt.plot(row['days'], row['closelog'], 'ro', markersize=2)\n\n# Custom Line labels\nfor halving, group in btc.groupby('halving'):\n    last_point = group.iloc[-1]\n    x = last_point['days']\n    y = last_point['closelog']\n    max_days = group['days'].max()\n    plt.text(x + 8, y, f'Halving {halving}\\n{max_days} days', color=lines[halving], fontsize=8, ha='left', va='center')\n    \n# Add Year Label\ncurrent_year_month = btc['year_month'].max() \nplt.text(1, 1.05, f'{current_year_month}',\n    transform=plt.gca().transAxes,\n    fontsize=22, ha='right', va='top',\n    fontweight='bold', color='#D3D3D3')\n\n# Add Data Source\nplt.text(0, -0.065, 'Data Source: CryptoCompare', \n         transform=plt.gca().transAxes, \n         fontsize=8, \n         color='gray')\n\n# Adjust layout\nplt.tight_layout()\n\n# Print it!\nplt.show()"
  },
  {
    "objectID": "cv.html#教育背景",
    "href": "cv.html#教育背景",
    "title": "Guillem Maya",
    "section": "教育背景",
    "text": "教育背景"
  },
  {
    "objectID": "cv.html#语言能力",
    "href": "cv.html#语言能力",
    "title": "Guillem Maya",
    "section": "语言能力",
    "text": "语言能力"
  },
  {
    "objectID": "cv.html#技能",
    "href": "cv.html#技能",
    "title": "Guillem Maya",
    "section": "技能",
    "text": "技能"
  }
]